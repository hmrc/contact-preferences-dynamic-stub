# IF THE MICRO-SERVICE DOES NOT NEED ANY TEST-ONLY END-POINTS (ALWAYS PREFERRED) DELETE THIS FILE.

# !!!WARNING!!! This file MUST NOT be referenced in the "application.conf" file to avoid risk of rolling test routes in the production environment.
# If you need test routes when running tests in CI make sure that the profile for this micro-service (used by service-manager) defines this router as parameter.
# To do so add the following line to the micro-service profile: "-Dapplication.router=testOnlyDoNotUseInAppConf.Routes"
# To start the micro-service locally using the test routes run the following command: "sbt run -Dapplication.router=testOnlyDoNotUseInAppConf.Routes" 

# Any test-only end-point should be defined here.
# !!!WARNING!!! Every route defined in this file MUST be prefixed with "/test-only/". This is because NGINX is blocking every uri containing the string "test-only" in production.
# Failing to follow this rule may result in test routes deployed in production.

# Add all the application routes to the prod.routes file


POST          /test-only/tax-enrolments/issuer/insert                   @controllers.tests.TaxEnrolmentsTestController.addSubscriptionIssuerRecord
DELETE        /test-only/tax-enrolments/issuer/remove                   @controllers.tests.TaxEnrolmentsTestController.removeSubscriptionIssuerRecord

POST          /test-only/tax-enrolments/subscriber/insert               @controllers.tests.TaxEnrolmentsTestController.addSubscriptionSubscriberRecord
DELETE        /test-only/tax-enrolments/subscriber/remove               @controllers.tests.TaxEnrolmentsTestController.removeSubscriptionIssuerRecord

POST          /test-only/resident/individuals/register/insert           @controllers.tests.RegistrationTestController.addRegistrationRecord
DELETE        /test-only/resident/individuals/register/remove           @controllers.tests.RegistrationTestController.removeRegistrationRecord

POST          /test-only/resident/individuals/subscribe/insert          @controllers.tests.SubscriptionTestController.addSubscriptionRecord
DELETE        /test-only/resident/individuals/subscribe/remove          @controllers.tests.SubscriptionTestController.removeSubscriptionRecord

POST          /test-only/non-resident/individual/register/insert        @controllers.tests.GhostRegistrationTestController.addRegistrationRecord
DELETE        /test-only/non-resident/individual/register/remove        @controllers.tests.GhostRegistrationTestController.removeRegistrationRecord

POST          /test-only/agent/subscribe/client/insert                  @controllers.tests.AgentRelationshipTestController.addAgentClientRelationshipRecord
DELETE        /test-only/agent/subscribe/client/remove                  @controllers.tests.AgentRelationshipTestController.removeAgentClientRelationshipRecord

POST          /test-only/agent/subscribe/client/des/insert              @controllers.tests.DesAgentClientRelationshipTestController.addDesAgentClientRelationshipRecord
DELETE        /test-only/agent/subscribe/client/des/remove              @controllers.tests.DesAgentClientRelationshipTestController.removeDesAgentClientRelationshipRecord

POST          /test-only/exceptions/exception                           @controllers.tests.RouteExceptionTestController.addException
DELETE        /test-only/exceptions/exception                           @controllers.tests.RouteExceptionTestController.removeException

POST          /test-only/schemas                                        @controllers.tests.SchemaTestController.addSchema
DELETE        /test-only/schemas                                        @controllers.tests.SchemaTestController.removeSchema(url: String)

DELETE        /test-only/clear-down/all                                 @controllers.ClearDownController.clearDown

->            /                                                         prod.Routes
